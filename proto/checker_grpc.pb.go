// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: checker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigChecker_CheckConfigs_FullMethodName = "/checker.v1.ConfigChecker/CheckConfigs"
	ConfigChecker_Health_FullMethodName       = "/checker.v1.ConfigChecker/Health"
	ConfigChecker_GetStats_FullMethodName     = "/checker.v1.ConfigChecker/GetStats"
)

// ConfigCheckerClient is the client API for ConfigChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigCheckerClient interface {
	// Bidirectional streaming for real-time config checking
	CheckConfigs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CheckRequest, CheckResponse], error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Get service stats
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type configCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigCheckerClient(cc grpc.ClientConnInterface) ConfigCheckerClient {
	return &configCheckerClient{cc}
}

func (c *configCheckerClient) CheckConfigs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CheckRequest, CheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigChecker_ServiceDesc.Streams[0], ConfigChecker_CheckConfigs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CheckRequest, CheckResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigChecker_CheckConfigsClient = grpc.BidiStreamingClient[CheckRequest, CheckResponse]

func (c *configCheckerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ConfigChecker_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCheckerClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, ConfigChecker_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigCheckerServer is the server API for ConfigChecker service.
// All implementations must embed UnimplementedConfigCheckerServer
// for forward compatibility.
type ConfigCheckerServer interface {
	// Bidirectional streaming for real-time config checking
	CheckConfigs(grpc.BidiStreamingServer[CheckRequest, CheckResponse]) error
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Get service stats
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedConfigCheckerServer()
}

// UnimplementedConfigCheckerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigCheckerServer struct{}

func (UnimplementedConfigCheckerServer) CheckConfigs(grpc.BidiStreamingServer[CheckRequest, CheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CheckConfigs not implemented")
}
func (UnimplementedConfigCheckerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedConfigCheckerServer) GetStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedConfigCheckerServer) mustEmbedUnimplementedConfigCheckerServer() {}
func (UnimplementedConfigCheckerServer) testEmbeddedByValue()                       {}

// UnsafeConfigCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigCheckerServer will
// result in compilation errors.
type UnsafeConfigCheckerServer interface {
	mustEmbedUnimplementedConfigCheckerServer()
}

func RegisterConfigCheckerServer(s grpc.ServiceRegistrar, srv ConfigCheckerServer) {
	// If the following call pancis, it indicates UnimplementedConfigCheckerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigChecker_ServiceDesc, srv)
}

func _ConfigChecker_CheckConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigCheckerServer).CheckConfigs(&grpc.GenericServerStream[CheckRequest, CheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigChecker_CheckConfigsServer = grpc.BidiStreamingServer[CheckRequest, CheckResponse]

func _ConfigChecker_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCheckerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigChecker_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCheckerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigChecker_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCheckerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigChecker_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCheckerServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigChecker_ServiceDesc is the grpc.ServiceDesc for ConfigChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checker.v1.ConfigChecker",
	HandlerType: (*ConfigCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ConfigChecker_Health_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ConfigChecker_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckConfigs",
			Handler:       _ConfigChecker_CheckConfigs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "checker.proto",
}
